pipeline {
    agent any

    environment {
        GIT_URL = 'https://github.com/giulia-franco/formazione_sou_k8s'
        DOCKER_PATH = './Pipeline_jenkins/Dockerfile'  // Assicurati che il Dockerfile sia in questa cartella
        IMAGE_NAME = 'my_image'
        IMAGE_TAG = 'latest'
        DOCKER_CREDENTIALS = 'DOCKER_CREDENTIALS'
        RAMO = " "
    }

    parameters {
        choice(name: 'type', choices: ['branch main', 'branch develop', 'tag'], description: 'Select branch or tag')
        string(name: 'value', defaultValue: '', description: 'Enter the tag value (if type is tag)')
    }

    stages {

        // Fase di selezione del branch/tag
        stage("Selezione Branch/Tag") {
            steps {
                script {
                    if ("${type}" == "branch main") {
                        RAMO = "main"
                        echo "Branch selezionato: ${RAMO}"
                    } else if ("${type}" == "branch develop") {
                        RAMO = "develop"
                        echo "Branch selezionato: ${RAMO}"
                    } else if ("${type}" == "tag" && "${value}") {
                        RAMO = "${value}"
                        echo "Tag selezionato: ${RAMO}"
                    } else {
                        error "Tipo non valido o tag mancante!"
                    }
                }
            }
        }

        // Clonare la repository Git dal branch/tag scelto
        stage('Clona repository Git') {
            steps {
                script{
                    if ("${type}" == "tag" && "${value}"){
                        echo "clonazione del tag:${RAMO}"
                        sh "git checkout ${RAMO}"}
                    else{
                        echo "Clonazione del branch: ${RAMO}"
                        git url: "${GIT_URL}", branch: "${RAMO}"
                    }
                }
            }
        }

        // Controllare e impostare il tag dell'immagine Docker
        stage('Controllo e Impostazione del Tag Docker') {
            steps {
                script {
                    if ("${type}" == "branch main") {
                        IMAGE_TAG = "latest"
                    } else if ("${type}" == "tag" && "${value}") {
                        IMAGE_TAG = "${value}"
                    } else if ("${type}" == "branch develop") {
                        def commitSHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        IMAGE_TAG = "develop-${commitSHA}"
                    }
                    echo "Tag Docker impostato: ${IMAGE_TAG}"
                }
            }
        }

        // Mostrare l'elenco dei file per debug (opzionale)
        stage('Mostra Elenco File') {
            steps {
                sh "ls -la"
            }
        }

        // Costruire l'immagine Docker
        stage('Costruisci Immagine Docker') {
            steps {
                script {
                    echo "Costruzione dell'immagine Docker con il tag: ${IMAGE_TAG}"
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", './Pipeline_jenkins')
                }
            }
        }

        // Login su Docker Hub
        stage('Login Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo \"${DOCKER_PASS}\" | docker login -u \"${DOCKER_USER}\" --password-stdin"
                    }
                }
            }
        }

        // Push dell'immagine su Docker Hub
        stage('Push Immagine Docker') {
            steps {
                script {
                    echo "Pushing Docker image ${IMAGE_NAME}:${IMAGE_TAG} a Docker Hub"
                    sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} giulia005/docker_hub_giulia:${IMAGE_TAG}"
                    sh "docker push giulia005/docker_hub_giulia:${IMAGE_TAG}"
                }
            }
        }
    }
}